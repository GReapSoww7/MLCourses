### DECISION TREE FOR CLASSIFICATION
-Classification and Regression Tree (CART)


# Classification Tree
    -sequence of if-else questions about individual features
    -Objective: INFER class labels
    -able to capture NON-LINEAR relationships between Features and Labels
    -don't require Feature Scaling (ex: Standardization)


# Breast cancer Dataset in 2D

-predict malignant or benign tumors

# Decision-Tree Diagram
    -learns if-else questions
        -TRUE FALSE tree based on params

# Classification-tree in scikit-learn

# import DecisionTreeClassifier
from sklearn.tree import DecisionTreeClassifier
# import train_test_split
from sklearn.model_selection import train_test_split
# import accuracy_score
from sklearn.metrics import accuracy_score
# Split the dataset into 80% train and 20% test
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size = 0.2, stratify=y, random_state=1)


# instantiate dt
dt = DecisionTreeClassifier(max_depth=2, random_state=1)


# fit dt to the training set
dt.fit(X_train, y_train)

# Predict the test set labels
y_pred = dt.predict(X_test)
# evaluate the test-set accuracy
accuracy_score(y_test, y_pred)
0.90350877192982459


# Decision Regions
-a Class Model divides the feature space into:
    -Decision Regions: region in the feature space where ALL instances are assigned to ONE class Label
-Decision boundary: surface separating different Decision Regions
##############################################################################

# PRACTICE

# Train Your First Classification Tree

In this exercise you'll work with the Wisconsin Breast Cancer Dataset from the UCI machine learning repository. 
You'll predict whether a tumor is malignant or benign based on two features: 
the mean radius of the tumor (radius_mean) and its mean number of concave points (concave points_mean).

The dataset is already loaded in your workspace and is split into 80% train and 20% test. 
The feature matrices are assigned to X_train and X_test, 
while the arrays of labels are assigned to y_train and y_test where class 1 corresponds to a malignant tumor 
and class 0 corresponds to a benign tumor. To obtain reproducible results, we also defined a variable called SEED which is set to 1.


Import DecisionTreeClassifier from sklearn.tree.

Instantiate a DecisionTreeClassifier dt of maximum depth equal to 6.

Fit dt to the training set.

Predict the test set labels and assign the result to y_pred.

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(max_depth=6, random_state=SEED)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
print(y_pred[0:5])

<script.py> output:
    [0 0 0 1 0]
##########################################################

# Evaluate the Classification Tree

Now that you've fit your first classification tree, it's time to evaluate its performance on the test set. 
You'll do so using the accuracy metric which corresponds to the fraction of correct predictions made on the test set.

The trained model dt from the previous exercise is loaded in your workspace along with the test set features matrix X_test and the array of labels y_test.

Import the function accuracy_score from sklearn.metrics.

Predict the test set labels and assign the obtained array to y_pred.

Evaluate the test set accuracy score of dt by calling accuracy_score() and assign the value to acc.


from sklearn.metrics import accuracy_score
y_pred = dt.predict(X_test) # Features
acc = accuracy_score(y_test, y_pred) # labels
print("Test set accuracy: {:.2f}".format(acc))
##################################################

# Logistic Regression vs Classification Tree

A classification tree divides the feature space into rectangular regions. 
In contrast, a linear model such as logistic regression produces only a single linear decision boundary dividing the feature space into two decision regions.

We have written a custom function called plot_labeled_decision_regions() that you can use to plot the decision regions of a list containing two trained classifiers. 
You can type help(plot_labeled_decision_regions) in the shell to learn more about this function.

X_train, X_test, y_train, y_test, the model dt that you've trained in an earlier exercise, as well as the function plot_labeled_decision_regions() are available in your workspace.


Import LogisticRegression from sklearn.linear_model.

Instantiate a LogisticRegression model and assign it to logreg.

Fit logreg to the training set.

Review the plot generated by plot_labeled_decision_regions().


from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression(random_state=1)
logreg.fit(X_train, y_train)

# Define a list called clfs containing the two classifiers logreg and dt
clfs = [logreg, dt]

# Review the decision regions of the two classifiers
plot_labeled_decision_regions(X_test, y_test, clfs)
#######################################################################